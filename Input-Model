package jme3test.helloworld;

import com.jme3.app.SimpleApplication;
import com.jme3.material.Material;
import com.jme3.math.Vector3f;
import com.jme3.scene.Geometry;
import com.jme3.scene.shape.Box;
import com.jme3.math.ColorRGBA;
import com.jme3.input.KeyInput;
import com.jme3.input.MouseInput;
import com.jme3.input.controls.ActionListener;
import com.jme3.input.controls.AnalogListener;
import com.jme3.input.controls.KeyTrigger;
import com.jme3.input.controls.MouseButtonTrigger;
import com.jme3.light.DirectionalLight;
import com.jme3.scene.Spatial;
import com.jme3.texture.Texture;

/** Sample 5 - how to map keys and mousebuttons to actions */
public class HelloInput extends SimpleApplication {

  public static void main(String[] args) {
    HelloInput app = new HelloInput();
    app.start();
  }
  protected Geometry test;
  protected Spatial player;
  Boolean isRunning=true;

  @Override
  public void simpleInitApp() {
    Box b = new Box(1, 1, 1);
    test = new Geometry("Player", b);
    Material mat = new Material(assetManager, "Common/MatDefs/Misc/Unshaded.j3md");
    mat.setColor("Color", ColorRGBA.Blue);
    test.setMaterial(mat);
    player = assetManager.loadModel("Models/dragon2/dragon2.j3o");
    player.scale(1.0f, 1.0f, 1.0f);
    player.rotate(0.0f, -3.0f, 0.0f);
    
    Material mat_brick2 = new Material(assetManager, "Common/MatDefs/Light/Lighting.j3md");
    Texture skin = assetManager.loadTexture("Textures/dipo.jpg");
   
    mat_brick2.setTexture("DiffuseMap",skin);
    mat_brick2.setBoolean("UseMaterialColors", true);
    mat_brick2.setColor("Diffuse", ColorRGBA.Yellow); //minimum material color
    mat_brick2.setColor("Specular", ColorRGBA.White); //shininess
    mat_brick2.setFloat("Shininess", 64f);
    
         
    player.setMaterial(mat_brick2);
    player.setLocalTranslation(0.0f, -5.0f, -2.0f);
    rootNode.attachChild(player);
    
    DirectionalLight sun = new DirectionalLight();
    sun.setDirection(new Vector3f(-0.1f, -0.7f, -1.0f));
    rootNode.addLight(sun);
    
    initKeys(); // load my custom keybinding
    
  }
  
  public void simpleUpdate(float tpf) {
        // make the player rotate:
        //player.move(0, 0, -0.5f*tpf);
  }

  /** Custom Keybinding: Map named actions to inputs. */
  private void initKeys() {
    // You can map one or several inputs to one named action
    inputManager.addMapping("Pause",  new KeyTrigger(KeyInput.KEY_P));
    inputManager.addMapping("Left",   new KeyTrigger(KeyInput.KEY_J));
    inputManager.addMapping("Right",  new KeyTrigger(KeyInput.KEY_K));
    inputManager.addMapping("Rotate", new KeyTrigger(KeyInput.KEY_SPACE),
                                      new MouseButtonTrigger(MouseInput.BUTTON_LEFT));
    // Add the names to the action listener.
    inputManager.addListener(actionListener,"Pause");
    inputManager.addListener(analogListener,"Left", "Right", "Rotate");

  }
  

  private ActionListener actionListener = new ActionListener() {
    public void onAction(String name, boolean keyPressed, float tpf) {
      if (name.equals("Pause") && !keyPressed) {
        isRunning = !isRunning;
      }
    }
  };

  private AnalogListener analogListener = new AnalogListener() {
    public void onAnalog(String name, float value, float tpf) {
      if (isRunning) {
        if (name.equals("Rotate")) {
          player.rotate(0, value*speed, 0);
        }
        if (name.equals("Right")) {
          Vector3f v = player.getLocalTranslation();
          player.setLocalTranslation(v.x + value*speed, v.y, v.z);
        }
        if (name.equals("Left")) {
          Vector3f v = player.getLocalTranslation();
          player.setLocalTranslation(v.x - value*speed, v.y, v.z);
        }
      } else {
        System.out.println("Press P to unpause.");
      }
    }
  };
}
